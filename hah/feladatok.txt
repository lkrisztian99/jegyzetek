Chapter 19 - Vector006 No_def függvén copy tiltás + alapértékek inicializálása
GUI - Graph.h/graph.cpp  , Image működése, Shape működése
	Feladatok: Kép mozgatása rácson belül kontrolláltan(forciklus move)
		Új gomb : szín és vonal stílus beállítása
		B2 függvény referencia átírása B2* pointerré
				void f(B2* b){b-> pvf}
				f(&objectname)
		Virtual-mit tud miaz(override)
week13 - c : dekódolás/kódolás számokról abc betüire átírása/8rol 5 kulcsra átállítás
Drill 20- Predikátum segítségével copy függvény feltételes másolás pl páros számok/csak 10 el osztható számok
Matrix drill- Elmélet: Generikus e vagy sem? miért?
			Mire jók a drill 1-2 feladata által megírt függvények
			Miért nem típus/dimenzió alapján vannak megadva/deklarálva mátrixok

			


#include "../forras/std_lib_facilities.h"
#include <random>



//poisson eloszlás / poisson distribution
int main(){

    random_device r;
    mt19937 gen(r());
    //default_random_engine el(r());
    //default_random_engine generator;
    poisson_distribution<int> pisson_dis(100);
    //int random = pisson_dis(gen);
    
    vector<int> vektor;

    for (int i = 0; i < 10; i++){
        vektor.push_back(pisson_dis(gen));
    }

    for(auto i: vektor){
        cout << i << " ";
    }
    cout << endl;
    return 0;
}






----------------------------------------

#include <string.h>
#include <unistd.h>

#define MAX_KULCS 100
#define BUFFER_MERET 256 //memória lefoglalása a beolvasott elemnek

int main(int argc, char** argv){

	char kulcs[MAX_KULCS]; //elemek amiket beolvasunk van egy max szám (100)
	char buffer[BUFFER_MERET]; //memória lefolgalása  megadott memóriaméretből

	int kulcs_index = 0; //hanyadik elemén járunk a kulcsnak segédváltozó
	int olvasott_bajtok = 0; //beolvasott elemek száma

	int kulcs_meret = strlen(argv[1]);
	strncpy(kulcs, argv[1], MAX_KULCS);  //átmásoljuk az elemeket paraméterek alapján

	while (( olvasott_bajtok = read ( 0, (void*) buffer, BUFFER_MERET ))){   // .... / hova olvassukbe / honnan
		
		for (int i = 0; i < olvasott_bajtok; ++i){

			buffer[i] = buffer[i] ^ kulcs[kulcs_index]; //exore művelet titkosítás //mégegyszer titkosítva a kulcs jó akkor az eredetit visszakapjuk
			kulcs_index = (kulcs_index + 1) % kulcs_meret;
		}

		write ( 1, buffer, olvasott_bajtok ); //hova írunk ki/mit írunk ki/ mennyi byteot
	}

	return 0;
--------------------------------------------------


#define MAX_TITKOS 4096
#define OLVASAS_BUFFER 256
#define KULCS_MERET 8
#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <string.h>

double atlagos_szohossz(const char titkos[], int titkos_meret){

	int sz = 0;

	for (int i = 0; i < titkos_meret; i++)
		if (titkos[i] == ' ')
			++sz;

	return (double) titkos_meret / sz;

}

int tiszta_lehet (const char titkos[], int titkos_meret){

	double szohossz = atlagos_szohossz(titkos, titkos_meret);

	return szohossz < 9.0 && szohossz > 6.0 &&
		strcasestr (titkos, "nem") && strcasestr (titkos, "hogy") &&
		strcasestr (titkos, "az") && strcasestr (titkos, "Ha");

}

void exor (const char kulcs[], int kulcs_meret, 
	char titkos[], int tikos_meret){

	int kulcs_index = 0;

	for (int i = 0; i < tikos_meret; i++){
		titkos[i] = titkos[i] ^ kulcs[kulcs_index];
		kulcs_index = (kulcs_index + 1) % kulcs_meret;
	}
}

int exor_tores(const char kulcs[], int kulcs_meret, 

	char titkos[], int titkos_meret){

	exor (kulcs, kulcs_meret, titkos, titkos_meret);

	return tiszta_lehet (titkos, titkos_meret);

}

int main(){

	char kulcs[KULCS_MERET];
	char titkos[MAX_TITKOS];
	char *p = titkos;
	int olvasott_bajtok;

	while ((olvasott_bajtok = 
		read ( 0, (void*) p, 					//beolvasás standart inputrol
		(p - titkos + OLVASAS_BUFFER <
		MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p )))  //megfelelő méretben való beolvasás kezelése

	p += olvasott_bajtok;  

	for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
		titkos[p - titkos + i] = '\0';

	for (int ii = '0'; ii <= '9'; ++ii)
		for (int ji = '0'; ji <= '9'; ++ji)
			for (int ki = '0'; ki <= '9'; ++ki)
				for (int li = '0'; li <= '9'; ++li)
					for (int mi = '0'; mi <= '9'; ++mi) 
						for (int ni = '0'; ni <= '9'; ++ni)
							for (int oi = '0'; oi <= '9'; ++oi)
								for (int pi = '0'; pi <= '9'; ++pi){
									kulcs[0] = ii;
									kulcs[1] = ji;
									kulcs[2] = ki;
									kulcs[3] = li;
									kulcs[4] = mi;
									kulcs[5] = ni;
									kulcs[6] = oi;
									kulcs[7] = pi;

					if (exor_tores(kulcs, KULCS_MERET, titkos, p - titkos))
						printf(
							"Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szöveg: [%s\n]",
							ii, ji, ki, li, mi, ni, oi, pi, titkos);

					exor (kulcs, KULCS_MERET, titkos, p - titkos);

				}

	return 0;
}

